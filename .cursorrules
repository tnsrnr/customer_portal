## Component Guidelines

### ShadCN Components

- 모든 UI 컴포넌트는 ShadCN을 사용해야 합니다.
- 컴포넌트 사용 전 설치 여부를 확인해야 합니다: `/component/ui` 디렉토리 체크
- 컴포넌트 설치 명령어를 사용해야 합니다: `npx shadcn@latest add [component-name]`
  - 주의: `npx shadcn-ui@latest add` 명령어는 deprecated. 반드시 `npx shadcn@latest add` 사용해야 합니다.


  ### Icons

  - 모든 아이콘은 Lucide React를 사용해야 합니다.
  - 아이콘 임포트 방법: `import { IconName } from "lucide-react"`
  - 예시: `import { Search, Menu } from "lucide-react"`

  ### Component Structure

  - 컴포넌트 `/components` 디렉토리에 위치해야 합니다.
  - UI 컴포넌트는 `/components/ui` 디렉토리에 위치해야 합니다.
  - 페이지별 컴포넌트는 `/app` 디렉토리 내 해당 라우트에 위치해야 합니다.

  ### 사이드바 메뉴 관리

  - 새로운 기능이나 페이지 개발 시 반드시 사이드바 메뉴에 추가해야 합니다.
  - 사이드바 메뉴 추가 위치: `src/components/ui/sidebar.tsx`
  - 메뉴 항목은 해당 파일의 구조를 따라야 합니다:
  - 각 메뉴 항목에는 적절한 Lucide 아이콘을 사용해야 합니다.
  - 서브메뉴가 5개 이상인 경우, 의미 있는 카테고리로 그룹화하여 구성해야 합니다.
  - 메뉴 항목을 추가할 때 TypeScript 타입 정의를 준수해야 합니다.

  ## Base Practices

   - TypeScript 타입은 반드시 정의해야 합니다.
   - 컴포넌트는 재사용 가능하도록 설계해야 합니다.

  ## 타입 체크 및 빌드 가이드라인

   - 개발 전 `npm run build`를 실행하여 타입 에러를 사전에 확인해야 합니다.
   - 외부 라이브러리 사용 시 반드시 타입 정의(`@types/*`) 패키지를 설치해야 합니다.
   - 모든 컴포넌트와 함수에 명시적 타입 선언이 필요합니다.
   - `any` 타입은 사용하지 않아야 합니다. 불가피한 경우 타입 선언 파일(`.d.ts`)에서 처리해야 합니다.
   - CSS 중첩 사용 시 PostCSS 설정에 `postcss-nested` 플러그인이 올바르게 구성되어 있는지 확인합니다.


   - 자동으로 깃 푸쉬 풀 금지. 반드시 수동으로 푸쉬 풀 해야 함.

 ## REST API 연동을 위한 API 클라이언트 설정 /Axios/관리 도구로 Zustand
 ## 각 섹션별 상세 페이지 구현
 ## 상태 관리 도구 추가 (예: Redux Toolkit 또는 Zustand)
 ## 인증/인가 시스템 구현